/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TAdultChildConstraints, TPropertyButtonsTypes, TSourceOptions } from "./models/igl-book-property";
import { ICountry, RoomBlockDetails, RoomBookingDetails } from "./models/IBooking";
import { IToast, TPositions } from "./components/ir-toast/toast";
import { IPageTwoDataUpdateProps } from "./models/models";
import { checkboxes, guestInfo, selectOption } from "./common/models";
import { ChannelManager, RoomType } from "./sample/channel/data";
import { Guest, Room } from "./models/booking.dto";
export { TAdultChildConstraints, TPropertyButtonsTypes, TSourceOptions } from "./models/igl-book-property";
export { ICountry, RoomBlockDetails, RoomBookingDetails } from "./models/IBooking";
export { IToast, TPositions } from "./components/ir-toast/toast";
export { IPageTwoDataUpdateProps } from "./models/models";
export { checkboxes, guestInfo, selectOption } from "./common/models";
export { ChannelManager, RoomType } from "./sample/channel/data";
export { Guest, Room } from "./models/booking.dto";
export namespace Components {
    interface IglApplicationInfo {
        "bedPreferenceType": any[];
        "bookingType": string;
        "currency": any;
        "guestInfo": { [key: string]: any };
        "guestRefKey": string;
        "index": number;
        "roomsList": { [key: string]: any }[];
        "selectedUnits": number[];
    }
    interface IglBlockDatesView {
        "defaultData": { [key: string]: any };
        "entryDate": string;
        "entryHour": number;
        "entryMinute": number;
        "fromDate": string;
        "isEventHover": boolean;
        "toDate": string;
    }
    interface IglBookProperty {
        "adultChildConstraints": TAdultChildConstraints;
        "allowedBookingSources": any;
        "bookingData": { [key: string]: any };
        "countryNodeList": any;
        "currency": { id: number; code: string };
        "language": string;
        "propertyid": number;
        "showPaymentDetails": boolean;
    }
    interface IglBookPropertyFooter {
        "disabled": boolean;
        "eventType": string;
    }
    interface IglBookPropertyHeader {
        "adultChildConstraints": TAdultChildConstraints;
        "adultChildCount": { adult: number; child: number };
        "bookingData": any;
        "bookingDataDefaultDateRange": { [key: string]: any };
        "message": string;
        "minDate": string;
        "showSplitBookingOption": boolean;
        "sourceOptions": TSourceOptions[];
        "splitBookingId": any;
        "splitBookings": any[];
    }
    interface IglBookingEvent {
        "allBookingEvents": { [key: string]: any };
        "bookingEvent": { [key: string]: any };
        "countryNodeList": any;
        "currency": any;
        "is_vacation_rental": boolean;
    }
    interface IglBookingEventHover {
        "bookingEvent": { [key: string]: any };
        "bubbleInfoTop": boolean;
        "countryNodeList": ICountry[];
        "currency": any;
        "is_vacation_rental": boolean;
    }
    interface IglBookingOverviewPage {
        "adultChildConstraints": TAdultChildConstraints;
        "adultChildCount": { adult: number; child: number };
        "bookingData": any;
        "currency": any;
        "dateRangeData": any;
        "eventType": string;
        "message": string;
        "ratePricingMode": any;
        "selectedRooms": Map<string, Map<string, any>>;
        "showSplitBookingOption": boolean;
        "sourceOptions": TSourceOptions[];
    }
    interface IglBookingRoomRatePlan {
        "bookingType": string;
        "currency": any;
        "dateDifference": number;
        "defaultData": { [key: string]: any };
        "fullyBlocked": boolean;
        "index": number;
        "ratePlanData": { [key: string]: any };
        "ratePricingMode": any[];
        "totalAvailableRooms": number;
    }
    interface IglBookingRooms {
        "bookingType": string;
        "currency": any;
        "dateDifference": number;
        "defaultData": Map<string, any>;
        "ratePricingMode": any[];
        "roomTypeData": { [key: string]: any };
    }
    interface IglCalBody {
        "calendarData": { [key: string]: any };
        "countryNodeList": any;
        "currency": any;
        "isScrollViewDragging": boolean;
        "today": String;
    }
    interface IglCalFooter {
        "calendarData": { [key: string]: any };
        "today": String;
    }
    interface IglCalHeader {
        "calendarData": { [key: string]: any };
        "propertyid": number;
        "to_date": string;
        "today": String;
        "unassignedDates": {};
    }
    interface IglDateRange {
        "defaultData": { [key: string]: any };
        "disabled": boolean;
        "minDate": string;
    }
    interface IglLegends {
        "legendData": { [key: string]: any };
    }
    interface IglPagetwo {
        "bedPreferenceType": any;
        "bookedByInfoData": { [key: string]: any };
        "bookingData": { [key: string]: any };
        "countryNodeList": any;
        "currency": any;
        "dateRangeData": { [key: string]: any };
        "isEditOrAddRoomEvent": boolean;
        "isLoading": string;
        "language": string;
        "propertyId": number;
        "selectedGuestData": any;
        "selectedRooms": Map<string, Map<string, any>>;
        "showPaymentDetails": boolean;
        "showSplitBookingOption": boolean;
    }
    interface IglPropertyBookedBy {
        "countryNodeList": ICountry[];
        "defaultData": { [key: string]: any };
        "language": string;
        "propertyId": number;
        "showPaymentDetails": boolean;
    }
    interface IglTbaBookingView {
        "calendarData": { [key: string]: any };
        "categoriesData": { [key: string]: any };
        "categoryId": any;
        "categoryIndex": any;
        "eventData": { [key: string]: any };
        "eventIndex": any;
        "selectedDate": any;
    }
    interface IglTbaCategoryView {
        "calendarData": { [key: string]: any };
        "categoriesData": { [key: string]: any };
        "categoryId": any;
        "categoryIndex": any;
        "eventDatas": any;
        "selectedDate": any;
    }
    interface IglToBeAssigned {
        "calendarData": { [key: string]: any };
        "from_date": string;
        "loadingMessage": string;
        "propertyid": number;
        "to_date": string;
    }
    interface IglooCalendar {
        "baseurl": string;
        "currencyName": string;
        "from_date": string;
        "language": string;
        "loadingMessage": string;
        "propertyid": number;
        "ticket": string;
        "to_date": string;
    }
    interface IrAutocomplete {
        "disabled": boolean;
        "duration": number;
        "inputId": string;
        "name": string;
        "placeholder": string;
        "propertyId": number;
        "required": boolean;
        "type": 'email' | 'text' | 'password' | 'number' | 'search';
        "value": string;
    }
    interface IrBookingDetails {
        "baseurl": string;
        "bookingDetails": any;
        "bookingNumber": string;
        "dropdownStatuses": any;
        "hasCheckIn": boolean;
        "hasCheckOut": boolean;
        "hasDelete": boolean;
        "hasMenu": boolean;
        "hasPrint": boolean;
        "hasReceipt": boolean;
        "hasRoomAdd": boolean;
        "hasRoomDelete": boolean;
        "hasRoomEdit": boolean;
        "language": string;
        "languageAbreviation": string;
        "paymentDetailsUrl": string;
        "paymentExceptionMessage": string;
        "setupDataCountries": selectOption[];
        "setupDataCountriesCode": selectOption[];
        "statusCodes": any;
        "ticket": string;
    }
    interface IrButton {
        "btn_block": boolean;
        "btn_color": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "btn_disabled": boolean;
        "btn_type": string;
        "icon": string;
        "name": string;
        "size": 'sm' | 'md' | 'lg';
        "text": any;
        "textSize": 'sm' | 'md' | 'lg';
    }
    interface IrChannelManager {
        "allowed_MinStayTypes": selectOption[];
        "allowed_channels": selectOption[];
        "allowed_properties": selectOption[];
        "dropdownData": {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "hostRoom": RoomType[];
        "listData": ChannelManager[];
        "mapReference": RoomType[];
    }
    interface IrCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "labelPosition": 'before' | 'after';
        "name": string;
        "value": string;
    }
    interface IrCheckboxes {
        "checkboxes": checkboxes[];
    }
    interface IrCommon {
        "extraResources": string;
    }
    interface IrDatePicker {
        "applyLabel": string;
        "autoApply": boolean;
        "cancelLabel": string;
        "customRangeLabel": string;
        "daysOfWeek": string[];
        "disabled": boolean;
        "firstDay": number;
        "format": string;
        "fromDate": Date;
        "fromLabel": string;
        "maxSpan": moment.DurationInputArg1;
        "minDate": string;
        "monthNames": string[];
        "opens": 'left' | 'right' | 'center';
        "separator": string;
        "singleDatePicker": boolean;
        "toDate": Date;
        "toLabel": string;
        "weekLabel": string;
    }
    interface IrDropdown {
        "data": {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "object": any;
    }
    interface IrGeneralSettings {
        "allowed_MinStayTypes": selectOption[];
        "allowed_channels": selectOption[];
        "allowed_properties": selectOption[];
        "connectionStatus": string;
        "data": ChannelManager;
        "mode": string;
    }
    interface IrGuestInfo {
        "data": Guest;
        "setupDataCountries": selectOption[];
        "setupDataCountriesCode": selectOption[];
    }
    interface IrIcon {
        "icon": string;
    }
    interface IrInputText {
        "LabelAvailable": boolean;
        "inputStyle": boolean;
        "label": string;
        "labelBackground": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelBorder": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition": 'left' | 'right' | 'center';
        "labelWidth": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "size": 'sm' | 'md' | 'lg';
        "submited": boolean;
        "textSize": 'sm' | 'md' | 'lg';
        "type": string;
        "value": any;
    }
    interface IrInterceptor {
        "defaultMessage": { loadingMessage: string; errorMessage: string; };
        "handledEndpoints": string[];
    }
    interface IrLabel {
        "iconShown": boolean;
        "imageSrc": string;
        "label": string;
        "value": string;
    }
    interface IrListItem {
        "dropdownData": {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "dropdownDataDisable": {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "listData": ChannelManager[];
    }
    interface IrLoader {
        "size": string;
    }
    interface IrLoadingScreen {
        "message": string;
    }
    interface IrMapping {
        "_onSaveMapping": () => Promise<void>;
        "hostRoom": RoomType[];
        "map": RoomType[];
        "mapReference": RoomType[];
    }
    interface IrModal {
        "btnPosition": 'left' | 'right' | 'center';
        "closeModal": () => Promise<void>;
        "icon": string;
        "iconAvailable": boolean;
        "item": any;
        "leftBtnActive": boolean;
        "leftBtnColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "leftBtnText": string;
        "modalBody": string;
        "modalTitle": string;
        "openModal": () => Promise<void>;
        "rightBtnActive": boolean;
        "rightBtnColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "rightBtnText": string;
    }
    interface IrPaymentDetails {
        "item": any;
        "paymentDetailsUrl": string;
        "paymentExceptionMessage": string;
    }
    interface IrRoom {
        "currency": string;
        "hasCheckIn": boolean;
        "hasCheckOut": boolean;
        "hasRoomAdd": boolean;
        "hasRoomDelete": boolean;
        "hasRoomEdit": boolean;
        "item": Room;
        "mealCodeName": string;
        "myRoomTypeFoodCat": string;
    }
    interface IrSelect {
        "LabelAvailable": boolean;
        "data": selectOption[];
        "firstOption": string;
        "label": string;
        "labelBackground": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelBorder": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition": 'left' | 'right' | 'center';
        "labelWidth": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name": string;
        "required": boolean;
        "selectStyle": boolean;
        "selectedValue": any;
        "size": 'sm' | 'md' | 'lg';
        "submited": boolean;
        "textSize": 'sm' | 'md' | 'lg';
    }
    interface IrSidebar {
        "name": string;
        "open": boolean;
        "side": 'right' | 'left';
        "toggleSidebar": () => Promise<void>;
    }
    interface IrSpan {
        "text": any;
    }
    interface IrSwitch {
        "baseClass"?: string;
        "classOn"?: string;
        "colorOn"?: string;
        "disabled"?: boolean;
        "handleWidth"?: string | 'auto';
        "indeterminate"?: boolean;
        "inverse"?: boolean;
        "labelOff": string;
        "labelOn": string;
        "labelText"?: string;
        "labelWidth"?: string | 'auto';
        "offClass"?: string;
        "offColor"?: string;
        "radioAllOff"?: boolean;
        "readonly"?: boolean;
        "size"?: string | 'mini' | 'small' | 'normal' | 'large';
        "switch_animate"?: boolean;
        "value": boolean;
        "wrapperClass"?: string;
    }
    interface IrTextarea {
        "cols": number;
        "label": string;
        "placeholder": string;
        "rows": number;
        "text": string;
    }
    interface IrToast {
        "hideToast": () => Promise<void>;
        "position": TPositions;
        "showToast": () => Promise<void>;
    }
    interface IrTooltip {
        "message": string;
    }
    interface IrTopbar {
    }
}
export interface IglApplicationInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglApplicationInfoElement;
}
export interface IglBlockDatesViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBlockDatesViewElement;
}
export interface IglBookPropertyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookPropertyElement;
}
export interface IglBookPropertyFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookPropertyFooterElement;
}
export interface IglBookPropertyHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookPropertyHeaderElement;
}
export interface IglBookingEventCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingEventElement;
}
export interface IglBookingEventHoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingEventHoverElement;
}
export interface IglBookingOverviewPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingOverviewPageElement;
}
export interface IglBookingRoomRatePlanCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingRoomRatePlanElement;
}
export interface IglBookingRoomsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingRoomsElement;
}
export interface IglCalBodyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglCalBodyElement;
}
export interface IglCalFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglCalFooterElement;
}
export interface IglCalHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglCalHeaderElement;
}
export interface IglDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglDateRangeElement;
}
export interface IglLegendsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglLegendsElement;
}
export interface IglPagetwoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglPagetwoElement;
}
export interface IglPropertyBookedByCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglPropertyBookedByElement;
}
export interface IglTbaBookingViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglTbaBookingViewElement;
}
export interface IglTbaCategoryViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglTbaCategoryViewElement;
}
export interface IglToBeAssignedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglToBeAssignedElement;
}
export interface IglooCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglooCalendarElement;
}
export interface IrAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAutocompleteElement;
}
export interface IrBookingDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingDetailsElement;
}
export interface IrButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrButtonElement;
}
export interface IrChannelManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrChannelManagerElement;
}
export interface IrCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCheckboxElement;
}
export interface IrCheckboxesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCheckboxesElement;
}
export interface IrDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDatePickerElement;
}
export interface IrDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDropdownElement;
}
export interface IrGeneralSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrGeneralSettingsElement;
}
export interface IrGuestInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrGuestInfoElement;
}
export interface IrIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrIconElement;
}
export interface IrInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrInputTextElement;
}
export interface IrInterceptorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrInterceptorElement;
}
export interface IrLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrLabelElement;
}
export interface IrListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrListItemElement;
}
export interface IrMappingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrMappingElement;
}
export interface IrModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrModalElement;
}
export interface IrPaymentDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrPaymentDetailsElement;
}
export interface IrRoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrRoomElement;
}
export interface IrSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSelectElement;
}
export interface IrSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSidebarElement;
}
export interface IrSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSwitchElement;
}
export interface IrTopbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrTopbarElement;
}
declare global {
    interface HTMLIglApplicationInfoElementEventMap {
        "dataUpdateEvent": { [key: string]: any };
    }
    interface HTMLIglApplicationInfoElement extends Components.IglApplicationInfo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglApplicationInfoElementEventMap>(type: K, listener: (this: HTMLIglApplicationInfoElement, ev: IglApplicationInfoCustomEvent<HTMLIglApplicationInfoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglApplicationInfoElementEventMap>(type: K, listener: (this: HTMLIglApplicationInfoElement, ev: IglApplicationInfoCustomEvent<HTMLIglApplicationInfoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglApplicationInfoElement: {
        prototype: HTMLIglApplicationInfoElement;
        new (): HTMLIglApplicationInfoElement;
    };
    interface HTMLIglBlockDatesViewElementEventMap {
        "dataUpdateEvent": { [key: string]: any };
    }
    interface HTMLIglBlockDatesViewElement extends Components.IglBlockDatesView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBlockDatesViewElementEventMap>(type: K, listener: (this: HTMLIglBlockDatesViewElement, ev: IglBlockDatesViewCustomEvent<HTMLIglBlockDatesViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBlockDatesViewElementEventMap>(type: K, listener: (this: HTMLIglBlockDatesViewElement, ev: IglBlockDatesViewCustomEvent<HTMLIglBlockDatesViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBlockDatesViewElement: {
        prototype: HTMLIglBlockDatesViewElement;
        new (): HTMLIglBlockDatesViewElement;
    };
    interface HTMLIglBookPropertyElementEventMap {
        "closeBookingWindow": { [key: string]: any };
        "bookingCreated": { pool?: string; data: RoomBookingDetails[] };
        "blockedCreated": RoomBlockDetails;
    }
    interface HTMLIglBookPropertyElement extends Components.IglBookProperty, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookPropertyElementEventMap>(type: K, listener: (this: HTMLIglBookPropertyElement, ev: IglBookPropertyCustomEvent<HTMLIglBookPropertyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookPropertyElementEventMap>(type: K, listener: (this: HTMLIglBookPropertyElement, ev: IglBookPropertyCustomEvent<HTMLIglBookPropertyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookPropertyElement: {
        prototype: HTMLIglBookPropertyElement;
        new (): HTMLIglBookPropertyElement;
    };
    interface HTMLIglBookPropertyFooterElementEventMap {
        "buttonClicked": { key: TPropertyButtonsTypes };
    }
    interface HTMLIglBookPropertyFooterElement extends Components.IglBookPropertyFooter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookPropertyFooterElementEventMap>(type: K, listener: (this: HTMLIglBookPropertyFooterElement, ev: IglBookPropertyFooterCustomEvent<HTMLIglBookPropertyFooterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookPropertyFooterElementEventMap>(type: K, listener: (this: HTMLIglBookPropertyFooterElement, ev: IglBookPropertyFooterCustomEvent<HTMLIglBookPropertyFooterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookPropertyFooterElement: {
        prototype: HTMLIglBookPropertyFooterElement;
        new (): HTMLIglBookPropertyFooterElement;
    };
    interface HTMLIglBookPropertyHeaderElementEventMap {
        "splitBookingDropDownChange": any;
        "sourceDropDownChange": string;
        "adultChild": any;
        "checkClicked": any;
        "buttonClicked": { key: TPropertyButtonsTypes };
        "toast": IToast;
    }
    interface HTMLIglBookPropertyHeaderElement extends Components.IglBookPropertyHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookPropertyHeaderElementEventMap>(type: K, listener: (this: HTMLIglBookPropertyHeaderElement, ev: IglBookPropertyHeaderCustomEvent<HTMLIglBookPropertyHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookPropertyHeaderElementEventMap>(type: K, listener: (this: HTMLIglBookPropertyHeaderElement, ev: IglBookPropertyHeaderCustomEvent<HTMLIglBookPropertyHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookPropertyHeaderElement: {
        prototype: HTMLIglBookPropertyHeaderElement;
        new (): HTMLIglBookPropertyHeaderElement;
    };
    interface HTMLIglBookingEventElementEventMap {
        "hideBubbleInfo": any;
        "updateEventData": any;
        "dragOverEventData": any;
    }
    interface HTMLIglBookingEventElement extends Components.IglBookingEvent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookingEventElementEventMap>(type: K, listener: (this: HTMLIglBookingEventElement, ev: IglBookingEventCustomEvent<HTMLIglBookingEventElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookingEventElementEventMap>(type: K, listener: (this: HTMLIglBookingEventElement, ev: IglBookingEventCustomEvent<HTMLIglBookingEventElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookingEventElement: {
        prototype: HTMLIglBookingEventElement;
        new (): HTMLIglBookingEventElement;
    };
    interface HTMLIglBookingEventHoverElementEventMap {
        "showBookingPopup": any;
        "hideBubbleInfo": any;
        "deleteButton": string;
        "bookingCreated": { pool?: string; data: any[] };
    }
    interface HTMLIglBookingEventHoverElement extends Components.IglBookingEventHover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookingEventHoverElementEventMap>(type: K, listener: (this: HTMLIglBookingEventHoverElement, ev: IglBookingEventHoverCustomEvent<HTMLIglBookingEventHoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookingEventHoverElementEventMap>(type: K, listener: (this: HTMLIglBookingEventHoverElement, ev: IglBookingEventHoverCustomEvent<HTMLIglBookingEventHoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookingEventHoverElement: {
        prototype: HTMLIglBookingEventHoverElement;
        new (): HTMLIglBookingEventHoverElement;
    };
    interface HTMLIglBookingOverviewPageElementEventMap {
        "roomsDataUpdate": any;
    }
    interface HTMLIglBookingOverviewPageElement extends Components.IglBookingOverviewPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookingOverviewPageElementEventMap>(type: K, listener: (this: HTMLIglBookingOverviewPageElement, ev: IglBookingOverviewPageCustomEvent<HTMLIglBookingOverviewPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookingOverviewPageElementEventMap>(type: K, listener: (this: HTMLIglBookingOverviewPageElement, ev: IglBookingOverviewPageCustomEvent<HTMLIglBookingOverviewPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookingOverviewPageElement: {
        prototype: HTMLIglBookingOverviewPageElement;
        new (): HTMLIglBookingOverviewPageElement;
    };
    interface HTMLIglBookingRoomRatePlanElementEventMap {
        "dataUpdateEvent": { [key: string]: any };
        "gotoSplitPageTwoEvent": { [key: string]: any };
    }
    interface HTMLIglBookingRoomRatePlanElement extends Components.IglBookingRoomRatePlan, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookingRoomRatePlanElementEventMap>(type: K, listener: (this: HTMLIglBookingRoomRatePlanElement, ev: IglBookingRoomRatePlanCustomEvent<HTMLIglBookingRoomRatePlanElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookingRoomRatePlanElementEventMap>(type: K, listener: (this: HTMLIglBookingRoomRatePlanElement, ev: IglBookingRoomRatePlanCustomEvent<HTMLIglBookingRoomRatePlanElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookingRoomRatePlanElement: {
        prototype: HTMLIglBookingRoomRatePlanElement;
        new (): HTMLIglBookingRoomRatePlanElement;
    };
    interface HTMLIglBookingRoomsElementEventMap {
        "dataUpdateEvent": { [key: string]: any };
    }
    interface HTMLIglBookingRoomsElement extends Components.IglBookingRooms, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglBookingRoomsElementEventMap>(type: K, listener: (this: HTMLIglBookingRoomsElement, ev: IglBookingRoomsCustomEvent<HTMLIglBookingRoomsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglBookingRoomsElementEventMap>(type: K, listener: (this: HTMLIglBookingRoomsElement, ev: IglBookingRoomsCustomEvent<HTMLIglBookingRoomsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglBookingRoomsElement: {
        prototype: HTMLIglBookingRoomsElement;
        new (): HTMLIglBookingRoomsElement;
    };
    interface HTMLIglCalBodyElementEventMap {
        "showBookingPopup": any;
        "scrollPageToRoom": any;
        "addBookingDatasEvent": any[];
    }
    interface HTMLIglCalBodyElement extends Components.IglCalBody, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglCalBodyElementEventMap>(type: K, listener: (this: HTMLIglCalBodyElement, ev: IglCalBodyCustomEvent<HTMLIglCalBodyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglCalBodyElementEventMap>(type: K, listener: (this: HTMLIglCalBodyElement, ev: IglCalBodyCustomEvent<HTMLIglCalBodyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglCalBodyElement: {
        prototype: HTMLIglCalBodyElement;
        new (): HTMLIglCalBodyElement;
    };
    interface HTMLIglCalFooterElementEventMap {
        "optionEvent": { [key: string]: any };
    }
    interface HTMLIglCalFooterElement extends Components.IglCalFooter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglCalFooterElementEventMap>(type: K, listener: (this: HTMLIglCalFooterElement, ev: IglCalFooterCustomEvent<HTMLIglCalFooterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglCalFooterElementEventMap>(type: K, listener: (this: HTMLIglCalFooterElement, ev: IglCalFooterCustomEvent<HTMLIglCalFooterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglCalFooterElement: {
        prototype: HTMLIglCalFooterElement;
        new (): HTMLIglCalFooterElement;
    };
    interface HTMLIglCalHeaderElementEventMap {
        "optionEvent": { [key: string]: any };
        "gotoRoomEvent": {
    [key: string]: any;
  };
        "gotoToBeAssignedDate": {
    [key: string]: any;
  };
    }
    interface HTMLIglCalHeaderElement extends Components.IglCalHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglCalHeaderElementEventMap>(type: K, listener: (this: HTMLIglCalHeaderElement, ev: IglCalHeaderCustomEvent<HTMLIglCalHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglCalHeaderElementEventMap>(type: K, listener: (this: HTMLIglCalHeaderElement, ev: IglCalHeaderCustomEvent<HTMLIglCalHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglCalHeaderElement: {
        prototype: HTMLIglCalHeaderElement;
        new (): HTMLIglCalHeaderElement;
    };
    interface HTMLIglDateRangeElementEventMap {
        "dateSelectEvent": { [key: string]: any };
    }
    interface HTMLIglDateRangeElement extends Components.IglDateRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglDateRangeElementEventMap>(type: K, listener: (this: HTMLIglDateRangeElement, ev: IglDateRangeCustomEvent<HTMLIglDateRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglDateRangeElementEventMap>(type: K, listener: (this: HTMLIglDateRangeElement, ev: IglDateRangeCustomEvent<HTMLIglDateRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglDateRangeElement: {
        prototype: HTMLIglDateRangeElement;
        new (): HTMLIglDateRangeElement;
    };
    interface HTMLIglLegendsElementEventMap {
        "optionEvent": { [key: string]: any };
    }
    interface HTMLIglLegendsElement extends Components.IglLegends, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglLegendsElementEventMap>(type: K, listener: (this: HTMLIglLegendsElement, ev: IglLegendsCustomEvent<HTMLIglLegendsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglLegendsElementEventMap>(type: K, listener: (this: HTMLIglLegendsElement, ev: IglLegendsCustomEvent<HTMLIglLegendsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglLegendsElement: {
        prototype: HTMLIglLegendsElement;
        new (): HTMLIglLegendsElement;
    };
    interface HTMLIglPagetwoElementEventMap {
        "dataUpdateEvent": IPageTwoDataUpdateProps;
        "buttonClicked": {
    key: TPropertyButtonsTypes;
    data?: CustomEvent;
  };
    }
    interface HTMLIglPagetwoElement extends Components.IglPagetwo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglPagetwoElementEventMap>(type: K, listener: (this: HTMLIglPagetwoElement, ev: IglPagetwoCustomEvent<HTMLIglPagetwoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglPagetwoElementEventMap>(type: K, listener: (this: HTMLIglPagetwoElement, ev: IglPagetwoCustomEvent<HTMLIglPagetwoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglPagetwoElement: {
        prototype: HTMLIglPagetwoElement;
        new (): HTMLIglPagetwoElement;
    };
    interface HTMLIglPropertyBookedByElementEventMap {
        "dataUpdateEvent": { [key: string]: any };
    }
    interface HTMLIglPropertyBookedByElement extends Components.IglPropertyBookedBy, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglPropertyBookedByElementEventMap>(type: K, listener: (this: HTMLIglPropertyBookedByElement, ev: IglPropertyBookedByCustomEvent<HTMLIglPropertyBookedByElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglPropertyBookedByElementEventMap>(type: K, listener: (this: HTMLIglPropertyBookedByElement, ev: IglPropertyBookedByCustomEvent<HTMLIglPropertyBookedByElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglPropertyBookedByElement: {
        prototype: HTMLIglPropertyBookedByElement;
        new (): HTMLIglPropertyBookedByElement;
    };
    interface HTMLIglTbaBookingViewElementEventMap {
        "highlightToBeAssignedBookingEvent": any;
        "addToBeAssignedEvent": any;
        "scrollPageToRoom": any;
        "assignRoomEvent": { [key: string]: any };
    }
    interface HTMLIglTbaBookingViewElement extends Components.IglTbaBookingView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglTbaBookingViewElementEventMap>(type: K, listener: (this: HTMLIglTbaBookingViewElement, ev: IglTbaBookingViewCustomEvent<HTMLIglTbaBookingViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglTbaBookingViewElementEventMap>(type: K, listener: (this: HTMLIglTbaBookingViewElement, ev: IglTbaBookingViewCustomEvent<HTMLIglTbaBookingViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglTbaBookingViewElement: {
        prototype: HTMLIglTbaBookingViewElement;
        new (): HTMLIglTbaBookingViewElement;
    };
    interface HTMLIglTbaCategoryViewElementEventMap {
        "assignUnitEvent": { [key: string]: any };
    }
    interface HTMLIglTbaCategoryViewElement extends Components.IglTbaCategoryView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglTbaCategoryViewElementEventMap>(type: K, listener: (this: HTMLIglTbaCategoryViewElement, ev: IglTbaCategoryViewCustomEvent<HTMLIglTbaCategoryViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglTbaCategoryViewElementEventMap>(type: K, listener: (this: HTMLIglTbaCategoryViewElement, ev: IglTbaCategoryViewCustomEvent<HTMLIglTbaCategoryViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglTbaCategoryViewElement: {
        prototype: HTMLIglTbaCategoryViewElement;
        new (): HTMLIglTbaCategoryViewElement;
    };
    interface HTMLIglToBeAssignedElementEventMap {
        "optionEvent": { [key: string]: any };
        "reduceAvailableUnitEvent": { [key: string]: any };
        "showBookingPopup": any;
        "addToBeAssignedEvent": any;
        "highlightToBeAssignedBookingEvent": any;
    }
    interface HTMLIglToBeAssignedElement extends Components.IglToBeAssigned, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglToBeAssignedElementEventMap>(type: K, listener: (this: HTMLIglToBeAssignedElement, ev: IglToBeAssignedCustomEvent<HTMLIglToBeAssignedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglToBeAssignedElementEventMap>(type: K, listener: (this: HTMLIglToBeAssignedElement, ev: IglToBeAssignedCustomEvent<HTMLIglToBeAssignedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglToBeAssignedElement: {
        prototype: HTMLIglToBeAssignedElement;
        new (): HTMLIglToBeAssignedElement;
    };
    interface HTMLIglooCalendarElementEventMap {
        "dragOverHighlightElement": any;
        "moveBookingTo": any;
        "calculateUnassignedDates": any;
    }
    interface HTMLIglooCalendarElement extends Components.IglooCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIglooCalendarElementEventMap>(type: K, listener: (this: HTMLIglooCalendarElement, ev: IglooCalendarCustomEvent<HTMLIglooCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIglooCalendarElementEventMap>(type: K, listener: (this: HTMLIglooCalendarElement, ev: IglooCalendarCustomEvent<HTMLIglooCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIglooCalendarElement: {
        prototype: HTMLIglooCalendarElement;
        new (): HTMLIglooCalendarElement;
    };
    interface HTMLIrAutocompleteElementEventMap {
        "comboboxValue": { key: string; data: unknown };
        "inputCleared": null;
    }
    interface HTMLIrAutocompleteElement extends Components.IrAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrAutocompleteElementEventMap>(type: K, listener: (this: HTMLIrAutocompleteElement, ev: IrAutocompleteCustomEvent<HTMLIrAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrAutocompleteElementEventMap>(type: K, listener: (this: HTMLIrAutocompleteElement, ev: IrAutocompleteCustomEvent<HTMLIrAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrAutocompleteElement: {
        prototype: HTMLIrAutocompleteElement;
        new (): HTMLIrAutocompleteElement;
    };
    interface HTMLIrBookingDetailsElementEventMap {
        "sendDataToServer": guestInfo;
        "handlePrintClick": any;
        "handleReceiptClick": any;
        "handleDeleteClick": any;
        "handleMenuClick": any;
        "handleRoomAdd": any;
        "handleRoomEdit": any;
        "handleRoomDelete": any;
        "handleAddPayment": any;
    }
    interface HTMLIrBookingDetailsElement extends Components.IrBookingDetails, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingDetailsElementEventMap>(type: K, listener: (this: HTMLIrBookingDetailsElement, ev: IrBookingDetailsCustomEvent<HTMLIrBookingDetailsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingDetailsElementEventMap>(type: K, listener: (this: HTMLIrBookingDetailsElement, ev: IrBookingDetailsCustomEvent<HTMLIrBookingDetailsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingDetailsElement: {
        prototype: HTMLIrBookingDetailsElement;
        new (): HTMLIrBookingDetailsElement;
    };
    interface HTMLIrButtonElementEventMap {
        "clickHanlder": any;
    }
    interface HTMLIrButtonElement extends Components.IrButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrButtonElementEventMap>(type: K, listener: (this: HTMLIrButtonElement, ev: IrButtonCustomEvent<HTMLIrButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrButtonElementEventMap>(type: K, listener: (this: HTMLIrButtonElement, ev: IrButtonCustomEvent<HTMLIrButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrButtonElement: {
        prototype: HTMLIrButtonElement;
        new (): HTMLIrButtonElement;
    };
    interface HTMLIrChannelManagerElementEventMap {
        "fetchApi": ChannelManager[];
        "requestApiDelete": any;
        "requestApiDestinationHierarchy": string;
    }
    interface HTMLIrChannelManagerElement extends Components.IrChannelManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrChannelManagerElementEventMap>(type: K, listener: (this: HTMLIrChannelManagerElement, ev: IrChannelManagerCustomEvent<HTMLIrChannelManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrChannelManagerElementEventMap>(type: K, listener: (this: HTMLIrChannelManagerElement, ev: IrChannelManagerCustomEvent<HTMLIrChannelManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrChannelManagerElement: {
        prototype: HTMLIrChannelManagerElement;
        new (): HTMLIrChannelManagerElement;
    };
    interface HTMLIrCheckboxElementEventMap {
        "checkboxChange": { name: string; value: string; checked: boolean };
    }
    interface HTMLIrCheckboxElement extends Components.IrCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCheckboxElementEventMap>(type: K, listener: (this: HTMLIrCheckboxElement, ev: IrCheckboxCustomEvent<HTMLIrCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCheckboxElementEventMap>(type: K, listener: (this: HTMLIrCheckboxElement, ev: IrCheckboxCustomEvent<HTMLIrCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCheckboxElement: {
        prototype: HTMLIrCheckboxElement;
        new (): HTMLIrCheckboxElement;
    };
    interface HTMLIrCheckboxesElementEventMap {
        "checkboxesChange": checkboxes[];
    }
    interface HTMLIrCheckboxesElement extends Components.IrCheckboxes, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCheckboxesElementEventMap>(type: K, listener: (this: HTMLIrCheckboxesElement, ev: IrCheckboxesCustomEvent<HTMLIrCheckboxesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCheckboxesElementEventMap>(type: K, listener: (this: HTMLIrCheckboxesElement, ev: IrCheckboxesCustomEvent<HTMLIrCheckboxesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCheckboxesElement: {
        prototype: HTMLIrCheckboxesElement;
        new (): HTMLIrCheckboxesElement;
    };
    interface HTMLIrCommonElement extends Components.IrCommon, HTMLStencilElement {
    }
    var HTMLIrCommonElement: {
        prototype: HTMLIrCommonElement;
        new (): HTMLIrCommonElement;
    };
    interface HTMLIrDatePickerElementEventMap {
        "dateChanged": {
    start: moment.Moment;
    end: moment.Moment;
  };
    }
    interface HTMLIrDatePickerElement extends Components.IrDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDatePickerElementEventMap>(type: K, listener: (this: HTMLIrDatePickerElement, ev: IrDatePickerCustomEvent<HTMLIrDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDatePickerElementEventMap>(type: K, listener: (this: HTMLIrDatePickerElement, ev: IrDatePickerCustomEvent<HTMLIrDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDatePickerElement: {
        prototype: HTMLIrDatePickerElement;
        new (): HTMLIrDatePickerElement;
    };
    interface HTMLIrDropdownElementEventMap {
        "dropdownItemCLicked": { name: string; object: any };
    }
    interface HTMLIrDropdownElement extends Components.IrDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDropdownElementEventMap>(type: K, listener: (this: HTMLIrDropdownElement, ev: IrDropdownCustomEvent<HTMLIrDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDropdownElementEventMap>(type: K, listener: (this: HTMLIrDropdownElement, ev: IrDropdownCustomEvent<HTMLIrDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDropdownElement: {
        prototype: HTMLIrDropdownElement;
        new (): HTMLIrDropdownElement;
    };
    interface HTMLIrGeneralSettingsElementEventMap {
        "sendToParent": any;
        "connectionOff": any;
    }
    interface HTMLIrGeneralSettingsElement extends Components.IrGeneralSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrGeneralSettingsElementEventMap>(type: K, listener: (this: HTMLIrGeneralSettingsElement, ev: IrGeneralSettingsCustomEvent<HTMLIrGeneralSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrGeneralSettingsElementEventMap>(type: K, listener: (this: HTMLIrGeneralSettingsElement, ev: IrGeneralSettingsCustomEvent<HTMLIrGeneralSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrGeneralSettingsElement: {
        prototype: HTMLIrGeneralSettingsElement;
        new (): HTMLIrGeneralSettingsElement;
    };
    interface HTMLIrGuestInfoElementEventMap {
        "submitForm": guestInfo;
        "getSetupData": any;
    }
    interface HTMLIrGuestInfoElement extends Components.IrGuestInfo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrGuestInfoElementEventMap>(type: K, listener: (this: HTMLIrGuestInfoElement, ev: IrGuestInfoCustomEvent<HTMLIrGuestInfoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrGuestInfoElementEventMap>(type: K, listener: (this: HTMLIrGuestInfoElement, ev: IrGuestInfoCustomEvent<HTMLIrGuestInfoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrGuestInfoElement: {
        prototype: HTMLIrGuestInfoElement;
        new (): HTMLIrGuestInfoElement;
    };
    interface HTMLIrIconElementEventMap {
        "iconClickHandler": any;
    }
    interface HTMLIrIconElement extends Components.IrIcon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrIconElementEventMap>(type: K, listener: (this: HTMLIrIconElement, ev: IrIconCustomEvent<HTMLIrIconElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrIconElementEventMap>(type: K, listener: (this: HTMLIrIconElement, ev: IrIconCustomEvent<HTMLIrIconElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrIconElement: {
        prototype: HTMLIrIconElement;
        new (): HTMLIrIconElement;
    };
    interface HTMLIrInputTextElementEventMap {
        "textChange": any;
    }
    interface HTMLIrInputTextElement extends Components.IrInputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrInputTextElementEventMap>(type: K, listener: (this: HTMLIrInputTextElement, ev: IrInputTextCustomEvent<HTMLIrInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrInputTextElementEventMap>(type: K, listener: (this: HTMLIrInputTextElement, ev: IrInputTextCustomEvent<HTMLIrInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrInputTextElement: {
        prototype: HTMLIrInputTextElement;
        new (): HTMLIrInputTextElement;
    };
    interface HTMLIrInterceptorElementEventMap {
        "toast": IToast;
    }
    interface HTMLIrInterceptorElement extends Components.IrInterceptor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrInterceptorElementEventMap>(type: K, listener: (this: HTMLIrInterceptorElement, ev: IrInterceptorCustomEvent<HTMLIrInterceptorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrInterceptorElementEventMap>(type: K, listener: (this: HTMLIrInterceptorElement, ev: IrInterceptorCustomEvent<HTMLIrInterceptorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrInterceptorElement: {
        prototype: HTMLIrInterceptorElement;
        new (): HTMLIrInterceptorElement;
    };
    interface HTMLIrLabelElementEventMap {
        "editSidebar": any;
    }
    interface HTMLIrLabelElement extends Components.IrLabel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrLabelElementEventMap>(type: K, listener: (this: HTMLIrLabelElement, ev: IrLabelCustomEvent<HTMLIrLabelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrLabelElementEventMap>(type: K, listener: (this: HTMLIrLabelElement, ev: IrLabelCustomEvent<HTMLIrLabelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrLabelElement: {
        prototype: HTMLIrLabelElement;
        new (): HTMLIrLabelElement;
    };
    interface HTMLIrListItemElementEventMap {
        "sendDelete": any;
        "openSidebar": any;
        "createNew": any;
        "changeStatus": any;
    }
    interface HTMLIrListItemElement extends Components.IrListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrListItemElementEventMap>(type: K, listener: (this: HTMLIrListItemElement, ev: IrListItemCustomEvent<HTMLIrListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrListItemElementEventMap>(type: K, listener: (this: HTMLIrListItemElement, ev: IrListItemCustomEvent<HTMLIrListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrListItemElement: {
        prototype: HTMLIrListItemElement;
        new (): HTMLIrListItemElement;
    };
    interface HTMLIrLoaderElement extends Components.IrLoader, HTMLStencilElement {
    }
    var HTMLIrLoaderElement: {
        prototype: HTMLIrLoaderElement;
        new (): HTMLIrLoaderElement;
    };
    interface HTMLIrLoadingScreenElement extends Components.IrLoadingScreen, HTMLStencilElement {
    }
    var HTMLIrLoadingScreenElement: {
        prototype: HTMLIrLoadingScreenElement;
        new (): HTMLIrLoadingScreenElement;
    };
    interface HTMLIrMappingElementEventMap {
        "sendMappingToParent": any;
    }
    interface HTMLIrMappingElement extends Components.IrMapping, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrMappingElementEventMap>(type: K, listener: (this: HTMLIrMappingElement, ev: IrMappingCustomEvent<HTMLIrMappingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrMappingElementEventMap>(type: K, listener: (this: HTMLIrMappingElement, ev: IrMappingCustomEvent<HTMLIrMappingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrMappingElement: {
        prototype: HTMLIrMappingElement;
        new (): HTMLIrMappingElement;
    };
    interface HTMLIrModalElementEventMap {
        "confirmModal": any;
        "cancelModal": any;
    }
    interface HTMLIrModalElement extends Components.IrModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrModalElementEventMap>(type: K, listener: (this: HTMLIrModalElement, ev: IrModalCustomEvent<HTMLIrModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrModalElementEventMap>(type: K, listener: (this: HTMLIrModalElement, ev: IrModalCustomEvent<HTMLIrModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrModalElement: {
        prototype: HTMLIrModalElement;
        new (): HTMLIrModalElement;
    };
    interface HTMLIrPaymentDetailsElementEventMap {
        "handlePaymentItemChange": any;
        "creditCardPressHandler": any;
    }
    interface HTMLIrPaymentDetailsElement extends Components.IrPaymentDetails, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrPaymentDetailsElementEventMap>(type: K, listener: (this: HTMLIrPaymentDetailsElement, ev: IrPaymentDetailsCustomEvent<HTMLIrPaymentDetailsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrPaymentDetailsElementEventMap>(type: K, listener: (this: HTMLIrPaymentDetailsElement, ev: IrPaymentDetailsCustomEvent<HTMLIrPaymentDetailsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrPaymentDetailsElement: {
        prototype: HTMLIrPaymentDetailsElement;
        new (): HTMLIrPaymentDetailsElement;
    };
    interface HTMLIrRoomElementEventMap {
        "pressCheckIn": any;
        "pressCheckOut": any;
    }
    interface HTMLIrRoomElement extends Components.IrRoom, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrRoomElementEventMap>(type: K, listener: (this: HTMLIrRoomElement, ev: IrRoomCustomEvent<HTMLIrRoomElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrRoomElementEventMap>(type: K, listener: (this: HTMLIrRoomElement, ev: IrRoomCustomEvent<HTMLIrRoomElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrRoomElement: {
        prototype: HTMLIrRoomElement;
        new (): HTMLIrRoomElement;
    };
    interface HTMLIrSelectElementEventMap {
        "selectChange": any;
    }
    interface HTMLIrSelectElement extends Components.IrSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSelectElementEventMap>(type: K, listener: (this: HTMLIrSelectElement, ev: IrSelectCustomEvent<HTMLIrSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSelectElementEventMap>(type: K, listener: (this: HTMLIrSelectElement, ev: IrSelectCustomEvent<HTMLIrSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSelectElement: {
        prototype: HTMLIrSelectElement;
        new (): HTMLIrSelectElement;
    };
    interface HTMLIrSidebarElementEventMap {
        "irSidebarToggle": any;
    }
    interface HTMLIrSidebarElement extends Components.IrSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSidebarElementEventMap>(type: K, listener: (this: HTMLIrSidebarElement, ev: IrSidebarCustomEvent<HTMLIrSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSidebarElementEventMap>(type: K, listener: (this: HTMLIrSidebarElement, ev: IrSidebarCustomEvent<HTMLIrSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSidebarElement: {
        prototype: HTMLIrSidebarElement;
        new (): HTMLIrSidebarElement;
    };
    interface HTMLIrSpanElement extends Components.IrSpan, HTMLStencilElement {
    }
    var HTMLIrSpanElement: {
        prototype: HTMLIrSpanElement;
        new (): HTMLIrSpanElement;
    };
    interface HTMLIrSwitchElementEventMap {
        "valueChange": boolean;
    }
    interface HTMLIrSwitchElement extends Components.IrSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSwitchElementEventMap>(type: K, listener: (this: HTMLIrSwitchElement, ev: IrSwitchCustomEvent<HTMLIrSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSwitchElementEventMap>(type: K, listener: (this: HTMLIrSwitchElement, ev: IrSwitchCustomEvent<HTMLIrSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSwitchElement: {
        prototype: HTMLIrSwitchElement;
        new (): HTMLIrSwitchElement;
    };
    interface HTMLIrTextareaElement extends Components.IrTextarea, HTMLStencilElement {
    }
    var HTMLIrTextareaElement: {
        prototype: HTMLIrTextareaElement;
        new (): HTMLIrTextareaElement;
    };
    interface HTMLIrToastElement extends Components.IrToast, HTMLStencilElement {
    }
    var HTMLIrToastElement: {
        prototype: HTMLIrToastElement;
        new (): HTMLIrToastElement;
    };
    interface HTMLIrTooltipElement extends Components.IrTooltip, HTMLStencilElement {
    }
    var HTMLIrTooltipElement: {
        prototype: HTMLIrTooltipElement;
        new (): HTMLIrTooltipElement;
    };
    interface HTMLIrTopbarElementEventMap {
        "openSidebar": any;
    }
    interface HTMLIrTopbarElement extends Components.IrTopbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrTopbarElementEventMap>(type: K, listener: (this: HTMLIrTopbarElement, ev: IrTopbarCustomEvent<HTMLIrTopbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrTopbarElementEventMap>(type: K, listener: (this: HTMLIrTopbarElement, ev: IrTopbarCustomEvent<HTMLIrTopbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrTopbarElement: {
        prototype: HTMLIrTopbarElement;
        new (): HTMLIrTopbarElement;
    };
    interface HTMLElementTagNameMap {
        "igl-application-info": HTMLIglApplicationInfoElement;
        "igl-block-dates-view": HTMLIglBlockDatesViewElement;
        "igl-book-property": HTMLIglBookPropertyElement;
        "igl-book-property-footer": HTMLIglBookPropertyFooterElement;
        "igl-book-property-header": HTMLIglBookPropertyHeaderElement;
        "igl-booking-event": HTMLIglBookingEventElement;
        "igl-booking-event-hover": HTMLIglBookingEventHoverElement;
        "igl-booking-overview-page": HTMLIglBookingOverviewPageElement;
        "igl-booking-room-rate-plan": HTMLIglBookingRoomRatePlanElement;
        "igl-booking-rooms": HTMLIglBookingRoomsElement;
        "igl-cal-body": HTMLIglCalBodyElement;
        "igl-cal-footer": HTMLIglCalFooterElement;
        "igl-cal-header": HTMLIglCalHeaderElement;
        "igl-date-range": HTMLIglDateRangeElement;
        "igl-legends": HTMLIglLegendsElement;
        "igl-pagetwo": HTMLIglPagetwoElement;
        "igl-property-booked-by": HTMLIglPropertyBookedByElement;
        "igl-tba-booking-view": HTMLIglTbaBookingViewElement;
        "igl-tba-category-view": HTMLIglTbaCategoryViewElement;
        "igl-to-be-assigned": HTMLIglToBeAssignedElement;
        "igloo-calendar": HTMLIglooCalendarElement;
        "ir-autocomplete": HTMLIrAutocompleteElement;
        "ir-booking-details": HTMLIrBookingDetailsElement;
        "ir-button": HTMLIrButtonElement;
        "ir-channel-manager": HTMLIrChannelManagerElement;
        "ir-checkbox": HTMLIrCheckboxElement;
        "ir-checkboxes": HTMLIrCheckboxesElement;
        "ir-common": HTMLIrCommonElement;
        "ir-date-picker": HTMLIrDatePickerElement;
        "ir-dropdown": HTMLIrDropdownElement;
        "ir-general-settings": HTMLIrGeneralSettingsElement;
        "ir-guest-info": HTMLIrGuestInfoElement;
        "ir-icon": HTMLIrIconElement;
        "ir-input-text": HTMLIrInputTextElement;
        "ir-interceptor": HTMLIrInterceptorElement;
        "ir-label": HTMLIrLabelElement;
        "ir-list-item": HTMLIrListItemElement;
        "ir-loader": HTMLIrLoaderElement;
        "ir-loading-screen": HTMLIrLoadingScreenElement;
        "ir-mapping": HTMLIrMappingElement;
        "ir-modal": HTMLIrModalElement;
        "ir-payment-details": HTMLIrPaymentDetailsElement;
        "ir-room": HTMLIrRoomElement;
        "ir-select": HTMLIrSelectElement;
        "ir-sidebar": HTMLIrSidebarElement;
        "ir-span": HTMLIrSpanElement;
        "ir-switch": HTMLIrSwitchElement;
        "ir-textarea": HTMLIrTextareaElement;
        "ir-toast": HTMLIrToastElement;
        "ir-tooltip": HTMLIrTooltipElement;
        "ir-topbar": HTMLIrTopbarElement;
    }
}
declare namespace LocalJSX {
    interface IglApplicationInfo {
        "bedPreferenceType"?: any[];
        "bookingType"?: string;
        "currency"?: any;
        "guestInfo"?: { [key: string]: any };
        "guestRefKey"?: string;
        "index"?: number;
        "onDataUpdateEvent"?: (event: IglApplicationInfoCustomEvent<{ [key: string]: any }>) => void;
        "roomsList"?: { [key: string]: any }[];
        "selectedUnits"?: number[];
    }
    interface IglBlockDatesView {
        "defaultData"?: { [key: string]: any };
        "entryDate"?: string;
        "entryHour"?: number;
        "entryMinute"?: number;
        "fromDate"?: string;
        "isEventHover"?: boolean;
        "onDataUpdateEvent"?: (event: IglBlockDatesViewCustomEvent<{ [key: string]: any }>) => void;
        "toDate"?: string;
    }
    interface IglBookProperty {
        "adultChildConstraints"?: TAdultChildConstraints;
        "allowedBookingSources"?: any;
        "bookingData"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: { id: number; code: string };
        "language"?: string;
        "onBlockedCreated"?: (event: IglBookPropertyCustomEvent<RoomBlockDetails>) => void;
        "onBookingCreated"?: (event: IglBookPropertyCustomEvent<{ pool?: string; data: RoomBookingDetails[] }>) => void;
        "onCloseBookingWindow"?: (event: IglBookPropertyCustomEvent<{ [key: string]: any }>) => void;
        "propertyid"?: number;
        "showPaymentDetails"?: boolean;
    }
    interface IglBookPropertyFooter {
        "disabled"?: boolean;
        "eventType"?: string;
        "onButtonClicked"?: (event: IglBookPropertyFooterCustomEvent<{ key: TPropertyButtonsTypes }>) => void;
    }
    interface IglBookPropertyHeader {
        "adultChildConstraints"?: TAdultChildConstraints;
        "adultChildCount"?: { adult: number; child: number };
        "bookingData"?: any;
        "bookingDataDefaultDateRange"?: { [key: string]: any };
        "message"?: string;
        "minDate"?: string;
        "onAdultChild"?: (event: IglBookPropertyHeaderCustomEvent<any>) => void;
        "onButtonClicked"?: (event: IglBookPropertyHeaderCustomEvent<{ key: TPropertyButtonsTypes }>) => void;
        "onCheckClicked"?: (event: IglBookPropertyHeaderCustomEvent<any>) => void;
        "onSourceDropDownChange"?: (event: IglBookPropertyHeaderCustomEvent<string>) => void;
        "onSplitBookingDropDownChange"?: (event: IglBookPropertyHeaderCustomEvent<any>) => void;
        "onToast"?: (event: IglBookPropertyHeaderCustomEvent<IToast>) => void;
        "showSplitBookingOption"?: boolean;
        "sourceOptions"?: TSourceOptions[];
        "splitBookingId"?: any;
        "splitBookings"?: any[];
    }
    interface IglBookingEvent {
        "allBookingEvents"?: { [key: string]: any };
        "bookingEvent"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: any;
        "is_vacation_rental"?: boolean;
        "onDragOverEventData"?: (event: IglBookingEventCustomEvent<any>) => void;
        "onHideBubbleInfo"?: (event: IglBookingEventCustomEvent<any>) => void;
        "onUpdateEventData"?: (event: IglBookingEventCustomEvent<any>) => void;
    }
    interface IglBookingEventHover {
        "bookingEvent"?: { [key: string]: any };
        "bubbleInfoTop"?: boolean;
        "countryNodeList"?: ICountry[];
        "currency"?: any;
        "is_vacation_rental"?: boolean;
        "onBookingCreated"?: (event: IglBookingEventHoverCustomEvent<{ pool?: string; data: any[] }>) => void;
        "onDeleteButton"?: (event: IglBookingEventHoverCustomEvent<string>) => void;
        "onHideBubbleInfo"?: (event: IglBookingEventHoverCustomEvent<any>) => void;
        "onShowBookingPopup"?: (event: IglBookingEventHoverCustomEvent<any>) => void;
    }
    interface IglBookingOverviewPage {
        "adultChildConstraints"?: TAdultChildConstraints;
        "adultChildCount"?: { adult: number; child: number };
        "bookingData"?: any;
        "currency"?: any;
        "dateRangeData"?: any;
        "eventType"?: string;
        "message"?: string;
        "onRoomsDataUpdate"?: (event: IglBookingOverviewPageCustomEvent<any>) => void;
        "ratePricingMode"?: any;
        "selectedRooms"?: Map<string, Map<string, any>>;
        "showSplitBookingOption"?: boolean;
        "sourceOptions"?: TSourceOptions[];
    }
    interface IglBookingRoomRatePlan {
        "bookingType"?: string;
        "currency"?: any;
        "dateDifference"?: number;
        "defaultData"?: { [key: string]: any };
        "fullyBlocked"?: boolean;
        "index"?: number;
        "onDataUpdateEvent"?: (event: IglBookingRoomRatePlanCustomEvent<{ [key: string]: any }>) => void;
        "onGotoSplitPageTwoEvent"?: (event: IglBookingRoomRatePlanCustomEvent<{ [key: string]: any }>) => void;
        "ratePlanData"?: { [key: string]: any };
        "ratePricingMode"?: any[];
        "totalAvailableRooms"?: number;
    }
    interface IglBookingRooms {
        "bookingType"?: string;
        "currency"?: any;
        "dateDifference"?: number;
        "defaultData"?: Map<string, any>;
        "onDataUpdateEvent"?: (event: IglBookingRoomsCustomEvent<{ [key: string]: any }>) => void;
        "ratePricingMode"?: any[];
        "roomTypeData"?: { [key: string]: any };
    }
    interface IglCalBody {
        "calendarData"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: any;
        "isScrollViewDragging"?: boolean;
        "onAddBookingDatasEvent"?: (event: IglCalBodyCustomEvent<any[]>) => void;
        "onScrollPageToRoom"?: (event: IglCalBodyCustomEvent<any>) => void;
        "onShowBookingPopup"?: (event: IglCalBodyCustomEvent<any>) => void;
        "today"?: String;
    }
    interface IglCalFooter {
        "calendarData"?: { [key: string]: any };
        "onOptionEvent"?: (event: IglCalFooterCustomEvent<{ [key: string]: any }>) => void;
        "today"?: String;
    }
    interface IglCalHeader {
        "calendarData"?: { [key: string]: any };
        "onGotoRoomEvent"?: (event: IglCalHeaderCustomEvent<{
    [key: string]: any;
  }>) => void;
        "onGotoToBeAssignedDate"?: (event: IglCalHeaderCustomEvent<{
    [key: string]: any;
  }>) => void;
        "onOptionEvent"?: (event: IglCalHeaderCustomEvent<{ [key: string]: any }>) => void;
        "propertyid"?: number;
        "to_date"?: string;
        "today"?: String;
        "unassignedDates"?: {};
    }
    interface IglDateRange {
        "defaultData"?: { [key: string]: any };
        "disabled"?: boolean;
        "minDate"?: string;
        "onDateSelectEvent"?: (event: IglDateRangeCustomEvent<{ [key: string]: any }>) => void;
    }
    interface IglLegends {
        "legendData"?: { [key: string]: any };
        "onOptionEvent"?: (event: IglLegendsCustomEvent<{ [key: string]: any }>) => void;
    }
    interface IglPagetwo {
        "bedPreferenceType"?: any;
        "bookedByInfoData"?: { [key: string]: any };
        "bookingData"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: any;
        "dateRangeData"?: { [key: string]: any };
        "isEditOrAddRoomEvent"?: boolean;
        "isLoading"?: string;
        "language"?: string;
        "onButtonClicked"?: (event: IglPagetwoCustomEvent<{
    key: TPropertyButtonsTypes;
    data?: CustomEvent;
  }>) => void;
        "onDataUpdateEvent"?: (event: IglPagetwoCustomEvent<IPageTwoDataUpdateProps>) => void;
        "propertyId"?: number;
        "selectedGuestData"?: any;
        "selectedRooms"?: Map<string, Map<string, any>>;
        "showPaymentDetails"?: boolean;
        "showSplitBookingOption"?: boolean;
    }
    interface IglPropertyBookedBy {
        "countryNodeList"?: ICountry[];
        "defaultData"?: { [key: string]: any };
        "language"?: string;
        "onDataUpdateEvent"?: (event: IglPropertyBookedByCustomEvent<{ [key: string]: any }>) => void;
        "propertyId"?: number;
        "showPaymentDetails"?: boolean;
    }
    interface IglTbaBookingView {
        "calendarData"?: { [key: string]: any };
        "categoriesData"?: { [key: string]: any };
        "categoryId"?: any;
        "categoryIndex"?: any;
        "eventData"?: { [key: string]: any };
        "eventIndex"?: any;
        "onAddToBeAssignedEvent"?: (event: IglTbaBookingViewCustomEvent<any>) => void;
        "onAssignRoomEvent"?: (event: IglTbaBookingViewCustomEvent<{ [key: string]: any }>) => void;
        "onHighlightToBeAssignedBookingEvent"?: (event: IglTbaBookingViewCustomEvent<any>) => void;
        "onScrollPageToRoom"?: (event: IglTbaBookingViewCustomEvent<any>) => void;
        "selectedDate"?: any;
    }
    interface IglTbaCategoryView {
        "calendarData"?: { [key: string]: any };
        "categoriesData"?: { [key: string]: any };
        "categoryId"?: any;
        "categoryIndex"?: any;
        "eventDatas"?: any;
        "onAssignUnitEvent"?: (event: IglTbaCategoryViewCustomEvent<{ [key: string]: any }>) => void;
        "selectedDate"?: any;
    }
    interface IglToBeAssigned {
        "calendarData"?: { [key: string]: any };
        "from_date"?: string;
        "loadingMessage"?: string;
        "onAddToBeAssignedEvent"?: (event: IglToBeAssignedCustomEvent<any>) => void;
        "onHighlightToBeAssignedBookingEvent"?: (event: IglToBeAssignedCustomEvent<any>) => void;
        "onOptionEvent"?: (event: IglToBeAssignedCustomEvent<{ [key: string]: any }>) => void;
        "onReduceAvailableUnitEvent"?: (event: IglToBeAssignedCustomEvent<{ [key: string]: any }>) => void;
        "onShowBookingPopup"?: (event: IglToBeAssignedCustomEvent<any>) => void;
        "propertyid"?: number;
        "to_date"?: string;
    }
    interface IglooCalendar {
        "baseurl"?: string;
        "currencyName"?: string;
        "from_date"?: string;
        "language"?: string;
        "loadingMessage"?: string;
        "onCalculateUnassignedDates"?: (event: IglooCalendarCustomEvent<any>) => void;
        "onDragOverHighlightElement"?: (event: IglooCalendarCustomEvent<any>) => void;
        "onMoveBookingTo"?: (event: IglooCalendarCustomEvent<any>) => void;
        "propertyid"?: number;
        "ticket"?: string;
        "to_date"?: string;
    }
    interface IrAutocomplete {
        "disabled"?: boolean;
        "duration"?: number;
        "inputId"?: string;
        "name"?: string;
        "onComboboxValue"?: (event: IrAutocompleteCustomEvent<{ key: string; data: unknown }>) => void;
        "onInputCleared"?: (event: IrAutocompleteCustomEvent<null>) => void;
        "placeholder"?: string;
        "propertyId"?: number;
        "required"?: boolean;
        "type"?: 'email' | 'text' | 'password' | 'number' | 'search';
        "value"?: string;
    }
    interface IrBookingDetails {
        "baseurl"?: string;
        "bookingDetails"?: any;
        "bookingNumber"?: string;
        "dropdownStatuses"?: any;
        "hasCheckIn"?: boolean;
        "hasCheckOut"?: boolean;
        "hasDelete"?: boolean;
        "hasMenu"?: boolean;
        "hasPrint"?: boolean;
        "hasReceipt"?: boolean;
        "hasRoomAdd"?: boolean;
        "hasRoomDelete"?: boolean;
        "hasRoomEdit"?: boolean;
        "language"?: string;
        "languageAbreviation"?: string;
        "onHandleAddPayment"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onHandleDeleteClick"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onHandleMenuClick"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onHandlePrintClick"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onHandleReceiptClick"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onHandleRoomAdd"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onHandleRoomDelete"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onHandleRoomEdit"?: (event: IrBookingDetailsCustomEvent<any>) => void;
        "onSendDataToServer"?: (event: IrBookingDetailsCustomEvent<guestInfo>) => void;
        "paymentDetailsUrl"?: string;
        "paymentExceptionMessage"?: string;
        "setupDataCountries"?: selectOption[];
        "setupDataCountriesCode"?: selectOption[];
        "statusCodes"?: any;
        "ticket"?: string;
    }
    interface IrButton {
        "btn_block"?: boolean;
        "btn_color"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "btn_disabled"?: boolean;
        "btn_type"?: string;
        "icon"?: string;
        "name"?: string;
        "onClickHanlder"?: (event: IrButtonCustomEvent<any>) => void;
        "size"?: 'sm' | 'md' | 'lg';
        "text"?: any;
        "textSize"?: 'sm' | 'md' | 'lg';
    }
    interface IrChannelManager {
        "allowed_MinStayTypes"?: selectOption[];
        "allowed_channels"?: selectOption[];
        "allowed_properties"?: selectOption[];
        "dropdownData"?: {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "hostRoom"?: RoomType[];
        "listData"?: ChannelManager[];
        "mapReference"?: RoomType[];
        "onFetchApi"?: (event: IrChannelManagerCustomEvent<ChannelManager[]>) => void;
        "onRequestApiDelete"?: (event: IrChannelManagerCustomEvent<any>) => void;
        "onRequestApiDestinationHierarchy"?: (event: IrChannelManagerCustomEvent<string>) => void;
    }
    interface IrCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "labelPosition"?: 'before' | 'after';
        "name"?: string;
        "onCheckboxChange"?: (event: IrCheckboxCustomEvent<{ name: string; value: string; checked: boolean }>) => void;
        "value"?: string;
    }
    interface IrCheckboxes {
        "checkboxes"?: checkboxes[];
        "onCheckboxesChange"?: (event: IrCheckboxesCustomEvent<checkboxes[]>) => void;
    }
    interface IrCommon {
        "extraResources"?: string;
    }
    interface IrDatePicker {
        "applyLabel"?: string;
        "autoApply"?: boolean;
        "cancelLabel"?: string;
        "customRangeLabel"?: string;
        "daysOfWeek"?: string[];
        "disabled"?: boolean;
        "firstDay"?: number;
        "format"?: string;
        "fromDate"?: Date;
        "fromLabel"?: string;
        "maxSpan"?: moment.DurationInputArg1;
        "minDate"?: string;
        "monthNames"?: string[];
        "onDateChanged"?: (event: IrDatePickerCustomEvent<{
    start: moment.Moment;
    end: moment.Moment;
  }>) => void;
        "opens"?: 'left' | 'right' | 'center';
        "separator"?: string;
        "singleDatePicker"?: boolean;
        "toDate"?: Date;
        "toLabel"?: string;
        "weekLabel"?: string;
    }
    interface IrDropdown {
        "data"?: {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "object"?: any;
        "onDropdownItemCLicked"?: (event: IrDropdownCustomEvent<{ name: string; object: any }>) => void;
    }
    interface IrGeneralSettings {
        "allowed_MinStayTypes"?: selectOption[];
        "allowed_channels"?: selectOption[];
        "allowed_properties"?: selectOption[];
        "connectionStatus"?: string;
        "data"?: ChannelManager;
        "mode"?: string;
        "onConnectionOff"?: (event: IrGeneralSettingsCustomEvent<any>) => void;
        "onSendToParent"?: (event: IrGeneralSettingsCustomEvent<any>) => void;
    }
    interface IrGuestInfo {
        "data"?: Guest;
        "onGetSetupData"?: (event: IrGuestInfoCustomEvent<any>) => void;
        "onSubmitForm"?: (event: IrGuestInfoCustomEvent<guestInfo>) => void;
        "setupDataCountries"?: selectOption[];
        "setupDataCountriesCode"?: selectOption[];
    }
    interface IrIcon {
        "icon"?: string;
        "onIconClickHandler"?: (event: IrIconCustomEvent<any>) => void;
    }
    interface IrInputText {
        "LabelAvailable"?: boolean;
        "inputStyle"?: boolean;
        "label"?: string;
        "labelBackground"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelBorder"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition"?: 'left' | 'right' | 'center';
        "labelWidth"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name"?: string;
        "onTextChange"?: (event: IrInputTextCustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "size"?: 'sm' | 'md' | 'lg';
        "submited"?: boolean;
        "textSize"?: 'sm' | 'md' | 'lg';
        "type"?: string;
        "value"?: any;
    }
    interface IrInterceptor {
        "defaultMessage"?: { loadingMessage: string; errorMessage: string; };
        "handledEndpoints"?: string[];
        "onToast"?: (event: IrInterceptorCustomEvent<IToast>) => void;
    }
    interface IrLabel {
        "iconShown"?: boolean;
        "imageSrc"?: string;
        "label"?: string;
        "onEditSidebar"?: (event: IrLabelCustomEvent<any>) => void;
        "value"?: string;
    }
    interface IrListItem {
        "dropdownData"?: {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "dropdownDataDisable"?: {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "listData"?: ChannelManager[];
        "onChangeStatus"?: (event: IrListItemCustomEvent<any>) => void;
        "onCreateNew"?: (event: IrListItemCustomEvent<any>) => void;
        "onOpenSidebar"?: (event: IrListItemCustomEvent<any>) => void;
        "onSendDelete"?: (event: IrListItemCustomEvent<any>) => void;
    }
    interface IrLoader {
        "size"?: string;
    }
    interface IrLoadingScreen {
        "message"?: string;
    }
    interface IrMapping {
        "hostRoom"?: RoomType[];
        "map"?: RoomType[];
        "mapReference"?: RoomType[];
        "onSendMappingToParent"?: (event: IrMappingCustomEvent<any>) => void;
    }
    interface IrModal {
        "btnPosition"?: 'left' | 'right' | 'center';
        "icon"?: string;
        "iconAvailable"?: boolean;
        "item"?: any;
        "leftBtnActive"?: boolean;
        "leftBtnColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "leftBtnText"?: string;
        "modalBody"?: string;
        "modalTitle"?: string;
        "onCancelModal"?: (event: IrModalCustomEvent<any>) => void;
        "onConfirmModal"?: (event: IrModalCustomEvent<any>) => void;
        "rightBtnActive"?: boolean;
        "rightBtnColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "rightBtnText"?: string;
    }
    interface IrPaymentDetails {
        "item"?: any;
        "onCreditCardPressHandler"?: (event: IrPaymentDetailsCustomEvent<any>) => void;
        "onHandlePaymentItemChange"?: (event: IrPaymentDetailsCustomEvent<any>) => void;
        "paymentDetailsUrl"?: string;
        "paymentExceptionMessage"?: string;
    }
    interface IrRoom {
        "currency"?: string;
        "hasCheckIn"?: boolean;
        "hasCheckOut"?: boolean;
        "hasRoomAdd"?: boolean;
        "hasRoomDelete"?: boolean;
        "hasRoomEdit"?: boolean;
        "item"?: Room;
        "mealCodeName"?: string;
        "myRoomTypeFoodCat"?: string;
        "onPressCheckIn"?: (event: IrRoomCustomEvent<any>) => void;
        "onPressCheckOut"?: (event: IrRoomCustomEvent<any>) => void;
    }
    interface IrSelect {
        "LabelAvailable"?: boolean;
        "data"?: selectOption[];
        "firstOption"?: string;
        "label"?: string;
        "labelBackground"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelBorder"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition"?: 'left' | 'right' | 'center';
        "labelWidth"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name"?: string;
        "onSelectChange"?: (event: IrSelectCustomEvent<any>) => void;
        "required"?: boolean;
        "selectStyle"?: boolean;
        "selectedValue"?: any;
        "size"?: 'sm' | 'md' | 'lg';
        "submited"?: boolean;
        "textSize"?: 'sm' | 'md' | 'lg';
    }
    interface IrSidebar {
        "name"?: string;
        "onIrSidebarToggle"?: (event: IrSidebarCustomEvent<any>) => void;
        "open"?: boolean;
        "side"?: 'right' | 'left';
    }
    interface IrSpan {
        "text"?: any;
    }
    interface IrSwitch {
        "baseClass"?: string;
        "classOn"?: string;
        "colorOn"?: string;
        "disabled"?: boolean;
        "handleWidth"?: string | 'auto';
        "indeterminate"?: boolean;
        "inverse"?: boolean;
        "labelOff"?: string;
        "labelOn"?: string;
        "labelText"?: string;
        "labelWidth"?: string | 'auto';
        "offClass"?: string;
        "offColor"?: string;
        "onValueChange"?: (event: IrSwitchCustomEvent<boolean>) => void;
        "radioAllOff"?: boolean;
        "readonly"?: boolean;
        "size"?: string | 'mini' | 'small' | 'normal' | 'large';
        "switch_animate"?: boolean;
        "value"?: boolean;
        "wrapperClass"?: string;
    }
    interface IrTextarea {
        "cols"?: number;
        "label"?: string;
        "placeholder"?: string;
        "rows"?: number;
        "text"?: string;
    }
    interface IrToast {
        "position"?: TPositions;
    }
    interface IrTooltip {
        "message"?: string;
    }
    interface IrTopbar {
        "onOpenSidebar"?: (event: IrTopbarCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "igl-application-info": IglApplicationInfo;
        "igl-block-dates-view": IglBlockDatesView;
        "igl-book-property": IglBookProperty;
        "igl-book-property-footer": IglBookPropertyFooter;
        "igl-book-property-header": IglBookPropertyHeader;
        "igl-booking-event": IglBookingEvent;
        "igl-booking-event-hover": IglBookingEventHover;
        "igl-booking-overview-page": IglBookingOverviewPage;
        "igl-booking-room-rate-plan": IglBookingRoomRatePlan;
        "igl-booking-rooms": IglBookingRooms;
        "igl-cal-body": IglCalBody;
        "igl-cal-footer": IglCalFooter;
        "igl-cal-header": IglCalHeader;
        "igl-date-range": IglDateRange;
        "igl-legends": IglLegends;
        "igl-pagetwo": IglPagetwo;
        "igl-property-booked-by": IglPropertyBookedBy;
        "igl-tba-booking-view": IglTbaBookingView;
        "igl-tba-category-view": IglTbaCategoryView;
        "igl-to-be-assigned": IglToBeAssigned;
        "igloo-calendar": IglooCalendar;
        "ir-autocomplete": IrAutocomplete;
        "ir-booking-details": IrBookingDetails;
        "ir-button": IrButton;
        "ir-channel-manager": IrChannelManager;
        "ir-checkbox": IrCheckbox;
        "ir-checkboxes": IrCheckboxes;
        "ir-common": IrCommon;
        "ir-date-picker": IrDatePicker;
        "ir-dropdown": IrDropdown;
        "ir-general-settings": IrGeneralSettings;
        "ir-guest-info": IrGuestInfo;
        "ir-icon": IrIcon;
        "ir-input-text": IrInputText;
        "ir-interceptor": IrInterceptor;
        "ir-label": IrLabel;
        "ir-list-item": IrListItem;
        "ir-loader": IrLoader;
        "ir-loading-screen": IrLoadingScreen;
        "ir-mapping": IrMapping;
        "ir-modal": IrModal;
        "ir-payment-details": IrPaymentDetails;
        "ir-room": IrRoom;
        "ir-select": IrSelect;
        "ir-sidebar": IrSidebar;
        "ir-span": IrSpan;
        "ir-switch": IrSwitch;
        "ir-textarea": IrTextarea;
        "ir-toast": IrToast;
        "ir-tooltip": IrTooltip;
        "ir-topbar": IrTopbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "igl-application-info": LocalJSX.IglApplicationInfo & JSXBase.HTMLAttributes<HTMLIglApplicationInfoElement>;
            "igl-block-dates-view": LocalJSX.IglBlockDatesView & JSXBase.HTMLAttributes<HTMLIglBlockDatesViewElement>;
            "igl-book-property": LocalJSX.IglBookProperty & JSXBase.HTMLAttributes<HTMLIglBookPropertyElement>;
            "igl-book-property-footer": LocalJSX.IglBookPropertyFooter & JSXBase.HTMLAttributes<HTMLIglBookPropertyFooterElement>;
            "igl-book-property-header": LocalJSX.IglBookPropertyHeader & JSXBase.HTMLAttributes<HTMLIglBookPropertyHeaderElement>;
            "igl-booking-event": LocalJSX.IglBookingEvent & JSXBase.HTMLAttributes<HTMLIglBookingEventElement>;
            "igl-booking-event-hover": LocalJSX.IglBookingEventHover & JSXBase.HTMLAttributes<HTMLIglBookingEventHoverElement>;
            "igl-booking-overview-page": LocalJSX.IglBookingOverviewPage & JSXBase.HTMLAttributes<HTMLIglBookingOverviewPageElement>;
            "igl-booking-room-rate-plan": LocalJSX.IglBookingRoomRatePlan & JSXBase.HTMLAttributes<HTMLIglBookingRoomRatePlanElement>;
            "igl-booking-rooms": LocalJSX.IglBookingRooms & JSXBase.HTMLAttributes<HTMLIglBookingRoomsElement>;
            "igl-cal-body": LocalJSX.IglCalBody & JSXBase.HTMLAttributes<HTMLIglCalBodyElement>;
            "igl-cal-footer": LocalJSX.IglCalFooter & JSXBase.HTMLAttributes<HTMLIglCalFooterElement>;
            "igl-cal-header": LocalJSX.IglCalHeader & JSXBase.HTMLAttributes<HTMLIglCalHeaderElement>;
            "igl-date-range": LocalJSX.IglDateRange & JSXBase.HTMLAttributes<HTMLIglDateRangeElement>;
            "igl-legends": LocalJSX.IglLegends & JSXBase.HTMLAttributes<HTMLIglLegendsElement>;
            "igl-pagetwo": LocalJSX.IglPagetwo & JSXBase.HTMLAttributes<HTMLIglPagetwoElement>;
            "igl-property-booked-by": LocalJSX.IglPropertyBookedBy & JSXBase.HTMLAttributes<HTMLIglPropertyBookedByElement>;
            "igl-tba-booking-view": LocalJSX.IglTbaBookingView & JSXBase.HTMLAttributes<HTMLIglTbaBookingViewElement>;
            "igl-tba-category-view": LocalJSX.IglTbaCategoryView & JSXBase.HTMLAttributes<HTMLIglTbaCategoryViewElement>;
            "igl-to-be-assigned": LocalJSX.IglToBeAssigned & JSXBase.HTMLAttributes<HTMLIglToBeAssignedElement>;
            "igloo-calendar": LocalJSX.IglooCalendar & JSXBase.HTMLAttributes<HTMLIglooCalendarElement>;
            "ir-autocomplete": LocalJSX.IrAutocomplete & JSXBase.HTMLAttributes<HTMLIrAutocompleteElement>;
            "ir-booking-details": LocalJSX.IrBookingDetails & JSXBase.HTMLAttributes<HTMLIrBookingDetailsElement>;
            "ir-button": LocalJSX.IrButton & JSXBase.HTMLAttributes<HTMLIrButtonElement>;
            "ir-channel-manager": LocalJSX.IrChannelManager & JSXBase.HTMLAttributes<HTMLIrChannelManagerElement>;
            "ir-checkbox": LocalJSX.IrCheckbox & JSXBase.HTMLAttributes<HTMLIrCheckboxElement>;
            "ir-checkboxes": LocalJSX.IrCheckboxes & JSXBase.HTMLAttributes<HTMLIrCheckboxesElement>;
            "ir-common": LocalJSX.IrCommon & JSXBase.HTMLAttributes<HTMLIrCommonElement>;
            "ir-date-picker": LocalJSX.IrDatePicker & JSXBase.HTMLAttributes<HTMLIrDatePickerElement>;
            "ir-dropdown": LocalJSX.IrDropdown & JSXBase.HTMLAttributes<HTMLIrDropdownElement>;
            "ir-general-settings": LocalJSX.IrGeneralSettings & JSXBase.HTMLAttributes<HTMLIrGeneralSettingsElement>;
            "ir-guest-info": LocalJSX.IrGuestInfo & JSXBase.HTMLAttributes<HTMLIrGuestInfoElement>;
            "ir-icon": LocalJSX.IrIcon & JSXBase.HTMLAttributes<HTMLIrIconElement>;
            "ir-input-text": LocalJSX.IrInputText & JSXBase.HTMLAttributes<HTMLIrInputTextElement>;
            "ir-interceptor": LocalJSX.IrInterceptor & JSXBase.HTMLAttributes<HTMLIrInterceptorElement>;
            "ir-label": LocalJSX.IrLabel & JSXBase.HTMLAttributes<HTMLIrLabelElement>;
            "ir-list-item": LocalJSX.IrListItem & JSXBase.HTMLAttributes<HTMLIrListItemElement>;
            "ir-loader": LocalJSX.IrLoader & JSXBase.HTMLAttributes<HTMLIrLoaderElement>;
            "ir-loading-screen": LocalJSX.IrLoadingScreen & JSXBase.HTMLAttributes<HTMLIrLoadingScreenElement>;
            "ir-mapping": LocalJSX.IrMapping & JSXBase.HTMLAttributes<HTMLIrMappingElement>;
            "ir-modal": LocalJSX.IrModal & JSXBase.HTMLAttributes<HTMLIrModalElement>;
            "ir-payment-details": LocalJSX.IrPaymentDetails & JSXBase.HTMLAttributes<HTMLIrPaymentDetailsElement>;
            "ir-room": LocalJSX.IrRoom & JSXBase.HTMLAttributes<HTMLIrRoomElement>;
            "ir-select": LocalJSX.IrSelect & JSXBase.HTMLAttributes<HTMLIrSelectElement>;
            "ir-sidebar": LocalJSX.IrSidebar & JSXBase.HTMLAttributes<HTMLIrSidebarElement>;
            "ir-span": LocalJSX.IrSpan & JSXBase.HTMLAttributes<HTMLIrSpanElement>;
            "ir-switch": LocalJSX.IrSwitch & JSXBase.HTMLAttributes<HTMLIrSwitchElement>;
            "ir-textarea": LocalJSX.IrTextarea & JSXBase.HTMLAttributes<HTMLIrTextareaElement>;
            "ir-toast": LocalJSX.IrToast & JSXBase.HTMLAttributes<HTMLIrToastElement>;
            "ir-tooltip": LocalJSX.IrTooltip & JSXBase.HTMLAttributes<HTMLIrTooltipElement>;
            "ir-topbar": LocalJSX.IrTopbar & JSXBase.HTMLAttributes<HTMLIrTopbarElement>;
        }
    }
}
